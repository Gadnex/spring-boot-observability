package net.binarypaper.orderservice.order;

import java.util.UUID;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.cloud.sleuth.annotation.NewSpan;
import org.springframework.cloud.sleuth.annotation.SpanTag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import com.fasterxml.jackson.annotation.JsonView;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import net.binarypaper.orderservice.product.Product;
import net.binarypaper.orderservice.product.ProductServiceClient;
import net.logstash.logback.argument.StructuredArguments;

@RestController
@CrossOrigin(origins = { "${application.cors.origins}" })
@RequestMapping(path = "orders", produces = MediaType.APPLICATION_JSON_VALUE)
@Tag(name = "Order API", description = "API to manage orders")
@RequiredArgsConstructor
@Slf4j
public class OrderController {

    private final ProductServiceClient productServiceClient;

    private final KafkaTemplate<String, Order> kafkaTemplate;

    @Value("${application.kafka.topic}")
    private String topic;

    @PostMapping
    @ResponseStatus(HttpStatus.CREATED)
    @JsonView(Order.Views.View.class)
    @Operation(summary = "Create an order for a number of products", description = "Create an order for a number of products. The unique order number will be generated by the system.")
    @ApiResponses({
            @ApiResponse(responseCode = "201", description = "The order was created"),
            @ApiResponse(responseCode = "400", description = "Invalid order details", content = @Content)
    })
    @NewSpan
    public Order createOrder(
            @RequestBody @Validated(Order.Views.Add.class) @JsonView(Order.Views.Add.class) Order order,
            @RequestParam(name = "business-key") @SpanTag(key = "business-key") @Parameter(description = "A business key identifying the transaction", example = "771bc371-3b57-4d9c-9964-123cef7b9f47") String businessKey) {
        log.info("createOrder called",
                StructuredArguments.kv("order", order),
                StructuredArguments.kv("business-key", businessKey));

        ReferenceNumbers referenceNumbers = new ReferenceNumbers("Public 123", "Private 456");
        log.info("Public and Private References", referenceNumbers.exportStructuredArgument());

        order.setOrderNumber(UUID.randomUUID());
        for (OrderItem orderItem : order.getOrderItems()) {
            Product product = productServiceClient.getProductById(orderItem.getProductId())
                    .block();
            log.info("Product returned",
                    StructuredArguments.kv("product", product));
            orderItem.setProductName(product.getName());
            orderItem.setUnitPrice(product.getPrice());
            orderItem.setQuantity(product.getQuantity());
        }
        kafkaTemplate.send(topic, order);
        log.info("Order sent to Kafka topic", StructuredArguments.kv("topic", topic));
        return order;
    }

}